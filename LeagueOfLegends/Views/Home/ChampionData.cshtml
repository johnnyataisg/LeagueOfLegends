@using LeagueOfLegends.Models
@using System.Data.Entity
@model LeagueOfLegends.Models.ChampionSummary

@{
    Layout = null;
    ChampionStat championStats = (ChampionStat)ViewData["ChampionStats"];
    ChampionInfo championInfo = (ChampionInfo)ViewData["ChampionInfo"];
    ChampionSpell[] championSpells = (ChampionSpell[])ViewData["ChampionSpells"];
    String championTypeString = (String)ViewData["ChampionTypeString"];
}

<div id="left">
    <h5 style="color: yellow !important;">@Model.name, @Model.title</h5>
    <h6>Champion Type: @championTypeString</h6>
    <hr />
    <div class="champion-header">
        <img src="~/Images/Champions/Icon/@Model.ChampionImage.full" />
        <div id="champion-skillbars">
            <div class="meter">
                <div>Attack: </div>
                <meter value="@championInfo.attack" class="@(@championInfo.attack == 10.00 ? "meterFull" : "")" min="0" max="10"></meter>
            </div>
            <div class="meter">
                <div>Defense: </div>
                <meter value="@championInfo.defense" class="@(@championInfo.defense == 10.00 ? "meterFull" : "")" min="0" max="10"></meter>
            </div>
            <div class="meter">
                <div>Magic: </div>
                <meter value="@championInfo.magic" class="@(@championInfo.magic == 10.00 ? "meterFull" : "")" min="0" max="10"></meter>
            </div>
            <div class="meter">
                <div>Difficulty: </div>
                <meter value="@championInfo.difficulty" class="@(@championInfo.difficulty == 10.00 ? "meterFull" : "")" min="0" max="10"></meter>
            </div>
        </div>
    </div>
    <div class="champion-lore">
        <h6>Lore</h6>
        <p>@Model.lore</p>
    </div>
    <div class="champion-info-basics">
        <h6>Stats</h6>
        <div id="statsLeft">
            <p>
                <span>
                    Health: <br />
                    @Math.Round((double)championStats.hp, 2)  (+@Math.Round((double)championStats.hpperlevel, 2) per level)
                </span>
            </p>
            <p>
                <span>
                    @Model.partype: <br />
                    @Math.Round((double)championStats.mp, 2) (+@Math.Round((double)championStats.mpperlevel, 2) per level)
                </span>
            </p>
            <p>
                <span>
                    Attack Damage: <br />
                    @Math.Round((double)championStats.attackdamage, 2) (+@Math.Round((double)championStats.attackdamageperlevel, 2) per level)
                </span>
            </p>
            <p>
                <span>
                    Armor: <br />
                    @Math.Round((double)championStats.armor, 2)  (+@Math.Round((double)championStats.armorperlevel, 2) per level)
                </span>
            </p>
            <p>
                <span>Movement Speed: <br />
                    @Math.Round((double)championStats.movespeed, 2)
                </span>
            </p>
        </div>
        <div id="statsRight">
            <p>
                <span>
                    Health Regen: <br />
                    @Math.Round((double)championStats.hpregen, 2)  (+@Math.Round((double)championStats.hpregenperlevel, 2) per level)
                </span>
            </p>
            <p>
                <span>
                    @Model.partype Regen: <br />
                    @Math.Round((double)championStats.mpregen, 2) (+@Math.Round((double)championStats.mpregenperlevel, 2) per level)
                </span>
            </p>
            <p>
                <span>
                    Attack Speed: <br />
                    @Math.Round((double)championStats.attackspeed, 2)  (+@Math.Round((double)championStats.attackspeedperlevel, 2)% per level)
                </span>
            </p>
            <p>
                <span>Magic Resist: <br />
                    @Math.Round((double)championStats.spellblock, 2)  (+@Math.Round((double)championStats.spellblockperlevel, 2) per level)
                </span>
            </p>
        </div>
    </div>
</div>
<div id="right">
    <div class="spellContainer">
        @{ 
            ChampionPassive passive = Model.ChampionPassive;
        }
        <div class="spell-title-block">
            <img src="~/Images/Champions/Passive/@passive.PassiveImage.full" />
            <div class="title-and-cost-range">
                <p class="spell-title">Passive: @passive.name</p>
            </div>
        </div>
        <div class="spell-description-block">
            @Html.Raw(passive.description)
        </div>
    </div>
    @foreach (ChampionSpell spell in championSpells)
    {
        <div class="spellContainer">
            <div class="spell-title-block">
                <img src="~/Images/Champions/Spell/@spell.SpellImage.full" />
                <div class="title-and-cost-range">
                    <p class="spell-title">@spell.name</p>
                    @if (spell.costtype != "No Cost")
                    {
                        if (spell.costtype.Contains("{{ abilityresourcename }}"))
                        {
                            <div class="cost">Resource Cost: @spell.costburn @spell.costtype.Replace(" {{ abilityresourcename }}", Model.partype)</div>
                            <div class="range">Range: @spell.rangeburn</div>
                            <br />
                        }
                        else
                        {
                            <div class="cost">Resource Cost: @spell.costburn @spell.costtype</div>
                            <div class="range">Range: @spell.rangeburn</div>
                            <br />
                        }
                    }
                    else
                    {
                        <div class="cost">Resource Cost: No Cost</div>
                        <div class="range">Range: @spell.rangeburn</div>
                    }
                </div>
            </div>
            <div class="spell-description-block">
                @Html.Raw(spell.description)
            </div>
        </div>
    }
</div>